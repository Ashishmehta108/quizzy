// "use client";

// import { useEffect, useState } from "react";
// import { useParams, useRouter } from "next/navigation";
// import {
//   Card,
//   CardContent,
//   CardDescription,
//   CardHeader,
//   CardTitle,
// } from "@/components/ui/card";
// import { Badge } from "@/components/ui/badge";
// import { Alert, AlertDescription } from "@/components/ui/alert";
// import { Separator } from "@/components/ui/separator";
// import { Progress } from "@/components/ui/progress";
// import { Button } from "@/components/ui/button";
// import {
//   Accordion,
//   AccordionContent,
//   AccordionItem,
//   AccordionTrigger,
// } from "@/components/ui/accordion";
// import { Avatar, AvatarFallback } from "@/components/ui/avatar";
// import {
//   DropdownMenu,
//   DropdownMenuContent,
//   DropdownMenuItem,
//   DropdownMenuTrigger,
// } from "@/components/ui/dropdown-menu";
// import {
//   ArrowLeft,
//   XCircle,
//   Trophy,
//   Clock,
//   Target,
//   Info,
//   CheckCircle2,
//   X,
//   RotateCcw,
//   Share2,
//   Twitter,
//   Facebook,
//   Linkedin,
//   Copy,
//   BookOpen,
//   User,
//   Calendar,
//   Timer,
//   TrendingUp,
//   Award,
// } from "lucide-react";
// import { useAuthStore } from "@/store/auth";
// import api from "@/lib/api";
// import Link from "next/link";

// interface QuizAnswer {
//   questionId: string; // Unique identifier for each question
//   question: string;
//   selectedOptions: number[]; // 0-based indices of selected options
//   options: string[];
//   correctOption: number; // 0-based index of correct option
//   explanation?: string;
//   createdAt?: string;
//   submittedAt?: string;
// }

// interface QuizResult {
//   score: number;
//   percentage: string;
//   totalQuestions: number;
//   selectedAnswers: QuizAnswer[];
// }

// interface ApiResponse {
//   result: QuizResult;
// }

// export default function ResultViewPage() {
//   const [result, setResult] = useState<QuizResult | null>(null);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState<string>("");
//   const { user, isLoading, restoreSession } = useAuthStore();
//   const router = useRouter();
//   const { id } = useParams();

//   useEffect(() => {
//     const initializePage = async () => {
//       if (!isLoading) {
//         if (!user?.id) {
//           try {
//             await restoreSession();
//             if (!useAuthStore.getState().user) {
//               router.push("/login");
//               return;
//             }
//           } catch (error) {
//             router.push("/login");
//             return;
//           }
//         }
//         await fetchResult();
//       }
//     };

//     initializePage();
//   }, [user, isLoading, router, id, restoreSession]);

//   const fetchResult = async () => {
//     try {
//       setLoading(true);
//       const response = await api.get<ApiResponse>(`/results/${id}`, {
//         withCredentials: true,
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("access_token")}`,
//         },
//       });
//       console.log("this is response data ", response.data);
//       // Transform legacy data structure to new format if needed
//       const transformedResult = transformLegacyData(response.data.result);
//       setResult(transformedResult);
//     } catch (error: any) {
//       console.error("Error fetching result:", error);
//       setError(
//         error.response?.data?.message ||
//           error.message ||
//           "Something went wrong while fetching the result"
//       );
//     } finally {
//       setLoading(false);
//     }
//   };

//   const transformLegacyData = (legacyResult: any): QuizResult => {
//     const transformedAnswers: QuizAnswer[] = legacyResult.selectedAnswers.map(
//       (answer: any, index: number) => ({
//         questionId: answer.questionId || `question_${index}`, // Use existing ID or generate one
//         question: answer.question,
//         selectedOptions: Array.isArray(answer.selected)
//           ? answer.selected.map((sel: number) => sel - 1) // Convert 1-based to 0-based
//           : [answer.selected - 1], // Convert single selection to array and make 0-based
//         options: answer.options,
//         correctOption: answer.correct - 1, // Convert 1-based to 0-based
//         explanation: answer.explanation,
//         createdAt: answer.createdAt,
//         submittedAt: answer.submittedAt,
//       })
//     );

//     return {
//       ...legacyResult,
//       selectedAnswers: transformedAnswers,
//     };
//   };

//   const calculateTimeTaken = () => {
//     if (!result?.selectedAnswers?.length) return null;
//     const firstAnswer = result.selectedAnswers[0];
//     if (!firstAnswer.createdAt || !firstAnswer.submittedAt) return null;

//     const start = new Date(firstAnswer.createdAt);
//     const end = new Date(firstAnswer.submittedAt);
//     const diffMs = end.getTime() - start.getTime();
//     const diffMins = Math.floor(diffMs / 60000);
//     const diffSecs = Math.floor((diffMs % 60000) / 1000);

//     return `${diffMins}m ${diffSecs}s`;
//   };

//   // Fixed logic: Check if user's selected options include the correct option
//   const isAnswerCorrect = (
//     selectedOptions: number[],
//     correctOption: number
//   ) => {
//     return selectedOptions.includes(correctOption);
//   };

//   const getPerformanceData = (percentage: number) => {
//     if (percentage >= 90)
//       return { level: "Excellent", color: "emerald", icon: Trophy };
//     if (percentage >= 80)
//       return { level: "Great Job", color: "blue", icon: Award };
//     if (percentage >= 70)
//       return { level: "Well Done", color: "indigo", icon: Target };
//     if (percentage >= 60)
//       return { level: "Good Effort", color: "amber", icon: TrendingUp };
//     return { level: "Keep Practicing", color: "slate", icon: RotateCcw };
//   };

//   if (!user) return null;

//   if (loading) {
//     return (
//       <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-950 dark:to-slate-900">
//         <div className="container mx-auto px-4 py-8 max-w-4xl">
//           <div className="space-y-8">
//             <div className="flex items-center gap-3">
//               <div className="h-4 w-4 bg-slate-200 dark:bg-slate-800 rounded animate-pulse" />
//               <div className="h-4 w-32 bg-slate-200 dark:bg-slate-800 rounded animate-pulse" />
//             </div>
//             <div className="text-center space-y-4">
//               <div className="h-8 w-64 bg-slate-200 dark:bg-slate-800 rounded animate-pulse mx-auto" />
//               <div className="h-4 w-48 bg-slate-200 dark:bg-slate-800 rounded animate-pulse mx-auto" />
//             </div>
//             <Card className="border-slate-200 dark:border-slate-800 shadow-lg">
//               <CardHeader className="space-y-4">
//                 <div className="flex items-center justify-between">
//                   <div className="space-y-2">
//                     <div className="h-6 w-40 bg-slate-200 dark:bg-slate-800 rounded animate-pulse" />
//                     <div className="h-4 w-32 bg-slate-200 dark:bg-slate-800 rounded animate-pulse" />
//                   </div>
//                   <div className="h-20 w-20 bg-slate-200 dark:bg-slate-800 rounded-full animate-pulse" />
//                 </div>
//               </CardHeader>
//             </Card>
//           </div>
//         </div>
//       </div>
//     );
//   }

//   if (error || !result) {
//     return (
//       <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-950 dark:to-slate-900">
//         <div className="container mx-auto px-4 py-8 max-w-4xl">
//           <Alert
//             variant="destructive"
//             className="border-red-200 dark:border-red-800 shadow-lg"
//           >
//             <XCircle className="h-4 w-4" />
//             <AlertDescription>{error || "Result not found"}</AlertDescription>
//           </Alert>
//         </div>
//       </div>
//     );
//   }

//   const scorePercentage = Number.parseFloat(result.percentage);
//   const totalQuestions = result.totalQuestions;
//   const correctAnswers = result.score;
//   const incorrectAnswers = totalQuestions - correctAnswers;
//   const performanceData = getPerformanceData(scorePercentage);
//   const PerformanceIcon = performanceData.icon;

//   return (
//     <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-950 dark:to-slate-900">
//       <div className="container mx-auto px-4 py-8 max-w-4xl">
//         {/* Header */}
//         <div className="text-center mb-8">
//           <div className="flex items-center justify-center gap-4 mb-6">
//             <div className="text-center">
//               <h1 className="text-4xl font-bold text-slate-900 dark:text-slate-100 mb-2">
//                 Quiz Complete!
//               </h1>
//               <p className="text-slate-600 dark:text-slate-400 flex items-center justify-center gap-2">
//                 <Calendar className="h-4 w-4" />
//                 {new Date().toLocaleDateString("en-US", {
//                   weekday: "long",
//                   year: "numeric",
//                   month: "long",
//                   day: "numeric",
//                 })}
//               </p>
//             </div>
//           </div>
//         </div>

//         {/* Performance Summary Card */}
//         <Card className="mb-8 border-slate-200 dark:border-slate-800 shadow-xl bg-white dark:bg-slate-900">
//           <CardHeader className="border-b border-slate-100 dark:border-slate-800 bg-gradient-to-r from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900">
//             <div className="flex items-center justify-between">
//               <div className="flex items-center gap-4">
//                 <div
//                   className={`p-3 rounded-full bg-${performanceData.color}-100 dark:bg-${performanceData.color}-900/30`}
//                 >
//                   <PerformanceIcon
//                     className={`h-8 w-8 text-${performanceData.color}-600 dark:text-${performanceData.color}-400`}
//                   />
//                 </div>
//                 <div>
//                   <CardTitle className="text-3xl font-bold text-slate-900 dark:text-slate-100">
//                     {performanceData.level}
//                   </CardTitle>
//                   <CardDescription className="text-lg mt-1">
//                     <span className="font-semibold text-slate-700 dark:text-slate-300">
//                       {scorePercentage}% Overall Score
//                     </span>
//                   </CardDescription>
//                 </div>
//               </div>
//               <div className="text-right">
//                 <div className="text-5xl font-bold text-slate-900 dark:text-slate-100">
//                   {scorePercentage.toFixed(0)}%
//                 </div>
//                 <div className="text-sm text-slate-600 dark:text-slate-400">
//                   {correctAnswers} / {totalQuestions}
//                 </div>
//               </div>
//             </div>
//           </CardHeader>
//           <CardContent className="pt-6">
//             <div className="space-y-6">
//               {/* Progress Bar */}
//               <div className="space-y-3">
//                 <div className="flex justify-between text-sm">
//                   <span className="text-slate-600 dark:text-slate-400">
//                     Overall Performance
//                   </span>
//                   <span className="font-semibold text-slate-900 dark:text-slate-100">
//                     {scorePercentage}%
//                   </span>
//                 </div>
//                 <Progress
//                   value={scorePercentage}
//                   className="h-3 bg-slate-200 dark:bg-slate-800"
//                 />
//               </div>

//               {/* Stats Grid */}
//               <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
//                 <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-900/40 rounded-xl border border-blue-200 dark:border-blue-800">
//                   <Target className="h-6 w-6 mx-auto mb-2 text-blue-600 dark:text-blue-400" />
//                   <p className="text-sm text-blue-700 dark:text-blue-300 font-medium">
//                     Total
//                   </p>
//                   <p className="text-2xl font-bold text-blue-900 dark:text-blue-100">
//                     {totalQuestions}
//                   </p>
//                 </div>
//                 <div className="text-center p-4 bg-gradient-to-br from-emerald-50 to-emerald-100 dark:from-emerald-900/20 dark:to-emerald-900/40 rounded-xl border border-emerald-200 dark:border-emerald-800">
//                   <CheckCircle2 className="h-6 w-6 mx-auto mb-2 text-emerald-600 dark:text-emerald-400" />
//                   <p className="text-sm text-emerald-700 dark:text-emerald-300 font-medium">
//                     Correct
//                   </p>
//                   <p className="text-2xl font-bold text-emerald-900 dark:text-emerald-100">
//                     {correctAnswers}
//                   </p>
//                 </div>
//                 <div className="text-center p-4 bg-gradient-to-br from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-900/40 rounded-xl border border-red-200 dark:border-red-800">
//                   <X className="h-6 w-6 mx-auto mb-2 text-red-600 dark:text-red-400" />
//                   <p className="text-sm text-red-700 dark:text-red-300 font-medium">
//                     Incorrect
//                   </p>
//                   <p className="text-2xl font-bold text-red-900 dark:text-red-100">
//                     {incorrectAnswers}
//                   </p>
//                 </div>
//                 <div className="text-center p-4 bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-900/20 dark:to-amber-900/40 rounded-xl border border-amber-200 dark:border-amber-800">
//                   <TrendingUp className="h-6 w-6 mx-auto mb-2 text-amber-600 dark:text-amber-400" />
//                   <p className="text-sm text-amber-700 dark:text-amber-300 font-medium">
//                     Accuracy
//                   </p>
//                   <p className="text-2xl font-bold text-amber-900 dark:text-amber-100">
//                     {scorePercentage.toFixed(0)}%
//                   </p>
//                 </div>
//               </div>
//             </div>
//           </CardContent>
//         </Card>

//         <Separator className="my-8 bg-slate-200 dark:bg-slate-800" />

//         {/* Question Review Section */}
//         <div className="space-y-6">
//           <div className="flex items-center justify-between">
//             <div className="flex items-center gap-3">
//               <BookOpen className="h-6 w-6 text-slate-600 dark:text-slate-400" />
//               <div>
//                 <h2 className="text-2xl font-bold text-slate-900 dark:text-slate-100">
//                   Question Review
//                 </h2>
//                 <p className="text-slate-600 dark:text-slate-400">
//                   Review your answers and explanations
//                 </p>
//               </div>
//             </div>
//             <Badge
//               variant="outline"
//               className="px-3 py-1 border-slate-300 dark:border-slate-700"
//             >
//               {result.selectedAnswers.length} Questions
//             </Badge>
//           </div>

//           {/* Question Cards */}
//           {result.selectedAnswers.map((answer, index) => {
//             const isCorrect = isAnswerCorrect(
//               answer.selectedOptions,
//               answer.correctOption
//             );

//             return (
//               <Card
//                 key={answer.questionId} // Use unique questionId instead of index
//                 className={`shadow-lg transition-all duration-200 hover:shadow-xl ${
//                   isCorrect
//                     ? "border-l-4 border-l-emerald-500 bg-gradient-to-r from-emerald-50/50 to-white dark:from-emerald-900/10 dark:to-slate-900"
//                     : "border-l-4 border-l-red-500 bg-gradient-to-r from-red-50/50 to-white dark:from-red-900/10 dark:to-slate-900"
//                 } border-slate-200 dark:border-slate-800`}
//               >
//                 <CardHeader className="border-b border-slate-200 dark:border-slate-800">
//                   <div className="flex items-start justify-between gap-4">
//                     <div className="flex-1">
//                       <div className="flex items-center gap-3 mb-3">
//                         <Badge
//                           variant="outline"
//                           className="border-slate-300 dark:border-slate-700"
//                         >
//                           Question {index + 1}
//                         </Badge>
//                         {isCorrect ? (
//                           <Badge className="bg-emerald-600 hover:bg-emerald-700 text-white">
//                             <CheckCircle2 className="h-3 w-3 mr-1" />
//                             Correct
//                           </Badge>
//                         ) : (
//                           <Badge
//                             variant="secondary"
//                             className="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300"
//                           >
//                             <X className="h-3 w-3 mr-1" />
//                             Incorrect
//                           </Badge>
//                         )}
//                       </div>
//                       <CardTitle className="text-lg text-slate-900 dark:text-slate-100 leading-relaxed">
//                         {answer.question}
//                       </CardTitle>
//                     </div>
//                   </div>
//                 </CardHeader>
//                 <CardContent className="pt-6">
//                   <div className="space-y-4">
//                     {/* Options */}
//                     <div className="space-y-3">
//                       {answer.options.map((option, optionIndex) => {
//                         const isSelected =
//                           answer.selectedOptions.includes(optionIndex);
//                         const isCorrectOption =
//                           answer.correctOption === optionIndex;

//                         let optionClass =
//                           "p-4 rounded-lg border transition-all duration-200 ";
//                         let borderClass = "";
//                         let bgClass = "";

//                         if (isCorrectOption) {
//                           borderClass =
//                             "border-emerald-300 dark:border-emerald-700";
//                           bgClass = "bg-emerald-50 dark:bg-emerald-900/20";
//                         } else if (isSelected && !isCorrectOption) {
//                           borderClass = "border-red-300 dark:border-red-700";
//                           bgClass = "bg-red-50 dark:bg-red-900/20";
//                         } else {
//                           borderClass =
//                             "border-slate-200 dark:border-slate-700";
//                           bgClass = "bg-white dark:bg-slate-900/50";
//                         }

//                         optionClass += borderClass + " " + bgClass;

//                         return (
//                           <div key={optionIndex} className={optionClass}>
//                             <div className="flex items-center justify-between">
//                               <div className="flex items-center gap-3">
//                                 <div className="w-8 h-8 rounded-full bg-slate-200 dark:bg-slate-700 flex items-center justify-center text-sm font-medium text-slate-700 dark:text-slate-300">
//                                   {String.fromCharCode(65 + optionIndex)}
//                                 </div>
//                                 <span className="text-slate-900 dark:text-slate-100 font-medium">
//                                   {option}
//                                 </span>
//                               </div>
//                               <div className="flex items-center gap-2">
//                                 {isSelected && (
//                                   <Badge
//                                     variant="outline"
//                                     className="text-xs border-slate-300 dark:border-slate-600"
//                                   >
//                                     <User className="h-3 w-3 mr-1" />
//                                     Your Choice
//                                   </Badge>
//                                 )}
//                                 {isCorrectOption && (
//                                   <Badge className="text-xs bg-emerald-600 hover:bg-emerald-700 text-white">
//                                     <Trophy className="h-3 w-3 mr-1" />
//                                     Correct Answer
//                                   </Badge>
//                                 )}
//                                 {isCorrectOption ? (
//                                   <CheckCircle2 className="h-5 w-5 text-emerald-600 dark:text-emerald-400" />
//                                 ) : isSelected ? (
//                                   <X className="h-5 w-5 text-red-600 dark:text-red-400" />
//                                 ) : null}
//                               </div>
//                             </div>
//                           </div>
//                         );
//                       })}
//                     </div>

//                     {/* Explanation Accordion */}
//                     <Accordion type="single" collapsible>
//                       <AccordionItem
//                         value={`explanation-${answer.questionId}`}
//                         className="border-0"
//                       >
//                         <AccordionTrigger className="hover:no-underline p-4 bg-slate-50 dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700 transition-all duration-200 hover:bg-slate-100 dark:hover:bg-slate-700">
//                           <div className="flex items-center gap-2">
//                             <Info className="h-4 w-4 text-slate-600 dark:text-slate-400" />
//                             <span className="text-slate-900 dark:text-slate-100 font-medium">
//                               {isCorrect
//                                 ? "Why this is correct"
//                                 : "Learn the right answer"}
//                             </span>
//                           </div>
//                         </AccordionTrigger>
//                         <AccordionContent className="pt-4">
//                           <Alert className="border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-800/50">
//                             <Info className="h-4 w-4 text-slate-600 dark:text-slate-400" />
//                             <AlertDescription>
//                               {!isCorrect && (
//                                 <div className="mb-4 p-4 bg-white dark:bg-slate-800 rounded-lg border border-slate-200 dark:border-slate-700">
//                                   <div className="grid grid-cols-1 gap-3 text-sm">
//                                     <div>
//                                       <span className="font-semibold text-emerald-700 dark:text-emerald-300">
//                                         ✅ Correct Answer:
//                                       </span>
//                                       <br />
//                                       <span className="text-slate-600 dark:text-slate-400 ml-4">
//                                         {String.fromCharCode(
//                                           65 + answer.correctOption
//                                         )}
//                                         : {answer.options[answer.correctOption]}
//                                       </span>
//                                     </div>
//                                     <div>
//                                       <span className="font-semibold text-red-700 dark:text-red-300">
//                                         ❌ Your Answer:
//                                       </span>
//                                       <br />
//                                       <span className="text-slate-600 dark:text-slate-400 ml-4">
//                                         {answer.selectedOptions.length > 0
//                                           ? answer.selectedOptions
//                                               .map(
//                                                 (sel) =>
//                                                   `${String.fromCharCode(
//                                                     65 + sel
//                                                   )}: ${answer.options[sel]}`
//                                               )
//                                               .join(", ")
//                                           : "No answer selected"}
//                                       </span>
//                                     </div>
//                                   </div>
//                                 </div>
//                               )}
//                               <div className="text-slate-700 dark:text-slate-300 leading-relaxed">
//                                 {answer.explanation ||
//                                   (isCorrect
//                                     ? "🎉 Excellent! You selected the correct answer. Your understanding of this topic is solid."
//                                     : "💡 Review the correct answer above and the explanation to improve your understanding for next time.")}
//                               </div>
//                             </AlertDescription>
//                           </Alert>
//                         </AccordionContent>
//                       </AccordionItem>
//                     </Accordion>
//                   </div>
//                 </CardContent>
//               </Card>
//             );
//           })}
//         </div>
//       </div>
//     </div>
//   );
// }
// "use client";

// import { useEffect, useState,JSX } from "react";
// import { useParams, useRouter } from "next/navigation";
// import api from "@/lib/api";
// import Link from "next/link";
// import {
//   BookOpen,
//   Calendar,
//   CheckCircle2,
//   X,
//   Info,
//   Share2,
// } from "lucide-react";
// import {
//   Card,
//   CardContent,
//   CardHeader,
//   CardTitle,
//   CardDescription,
// } from "@/components/ui/card";
// import { Badge } from "@/components/ui/badge";
// import { Progress } from "@/components/ui/progress";
// import {
//   Accordion,
//   AccordionItem,
//   AccordionTrigger,
//   AccordionContent,
// } from "@/components/ui/accordion";
// import { Alert, AlertDescription } from "@/components/ui/alert";
// import { Separator } from "@/components/ui/separator";
// import { useAuthStore } from "@/store/auth";

// interface RawAnswer {
//   question?: string;
//   selected?: number[] | number;
//   correct?: number;
//   options?: string[];
//   explanation?: string;
//   createdAt?: string;
//   submittedAt?: string;
//   questionId?: string;
// }

// interface QuizAnswer {
//   questionId: string;
//   question: string;
//   selectedOptions: number[]; // 0-based
//   options: string[];
//   correctOption: number; // 0-based
//   explanation?: string;
//   createdAt?: string;
//   submittedAt?: string;
// }

// interface QuizResult {
//   score: number;
//   percentage: string | number;
//   totalQuestions: number;
//   selectedAnswers: QuizAnswer[];
// }

// interface ApiResponseWrapped {
//   result?: QuizResult;
//   // older API might return QuizResult directly as the response body
//   score?: number;
// }

// export default function ResultViewPage(): JSX.Element | null {
//   const [result, setResult] = useState<QuizResult | null>(null);
//   const [loading, setLoading] = useState<boolean>(true);
//   const [error, setError] = useState<string>("");
//   const { user, isLoading, restoreSession } = useAuthStore();
//   const router = useRouter();
//   const { id } = useParams();

//   useEffect(() => {
//     const initializePage = async () => {
//       if (!isLoading) {
//         if (!user?.id) {
//           try {
//             await restoreSession();
//             if (!useAuthStore.getState().user) {
//               router.push("/login");
//               return;
//             }
//           } catch {
//             router.push("/login");
//             return;
//           }
//         }
//         await fetchResult();
//       }
//     };
//     initializePage();
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//   }, [user, isLoading, id]);

//   const fetchResult = async () => {
//     try {
//       setLoading(true);
//       const response = await api.get<any>(`/results/${id}`, {
//         withCredentials: true,
//         headers: {
//           Authorization: `Bearer ${localStorage.getItem("access_token")}`,
//         },
//       });

//       // Accept either response.data.result or response.data (direct)
//       const payload = response.data?.result ?? response.data ?? response;
//       const normalized = normalizeBackendResult(payload);
//       setResult(normalized);
//     } catch (err: any) {
//       console.error("Error fetching result:", err);
//       setError(
//         err?.response?.data?.message ??
//           err?.message ??
//           "Something went wrong while fetching the result"
//       );
//     } finally {
//       setLoading(false);
//     }
//   };

//   // Normalize backend indexes (robustly handle 0-based or 1-based indices)
//   const normalizeBackendResult = (raw: any): QuizResult => {
//     if (!raw) {
//       return {
//         score: 0,
//         percentage: "0",
//         totalQuestions: 0,
//         selectedAnswers: [],
//       };
//     }

//     const rawAnswers: RawAnswer[] = raw.selectedAnswers ?? [];

//     // Detect indexing scheme:
//     // If any 'selected' value >= 1 and none are 0, assume 1-based.
//     const flattenedSelected = rawAnswers.flatMap((a) =>
//       Array.isArray(a.selected)
//         ? a.selected
//         : a.selected !== undefined
//         ? [a.selected]
//         : []
//     );
//     const hasZero = flattenedSelected.some((v) => v === 0);
//     const hasPositiveOnly =
//       flattenedSelected.length > 0 && flattenedSelected.every((v) => v >= 1);

//     const needsIndexShift = !hasZero && hasPositiveOnly;

//     const transformed: QuizAnswer[] = rawAnswers.map((a, idx) => {
//       const selArrRaw = Array.isArray(a.selected)
//         ? a.selected
//         : a.selected !== undefined
//         ? [a.selected]
//         : [];

//       const selectedOptions = selArrRaw.map((s) =>
//         typeof s === "number" ? (needsIndexShift ? s - 1 : s) : Number(s)
//       );

//       const correctRaw = a.correct ?? -1;
//       const correctOption =
//         typeof correctRaw === "number"
//           ? needsIndexShift
//             ? correctRaw - 1
//             : correctRaw
//           : Number(correctRaw);

//       const cleanOptions = (a.options ?? []).map((opt) =>
//         typeof opt === "string" ? opt.replace(/`/g, "").trim() : String(opt)
//       );

//       return {
//         questionId: a.questionId ?? `q_${idx}`,
//         question: a.question ?? "Untitled question",
//         selectedOptions,
//         options: cleanOptions,
//         correctOption,
//         explanation: a.explanation,
//         createdAt: a.createdAt,
//         submittedAt: a.submittedAt,
//       };
//     });

//     // If raw includes score/percentage/totalQuestions, keep them; otherwise infer
//     const score =
//       typeof raw.score === "number"
//         ? raw.score
//         : transformed.filter((t) => t.selectedOptions.includes(t.correctOption))
//             .length;
//     const totalQuestions =
//       typeof raw.totalQuestions === "number"
//         ? raw.totalQuestions
//         : transformed.length;
//     const percentage =
//       raw.percentage !== undefined
//         ? raw.percentage
//         : ((score / Math.max(1, totalQuestions)) * 100).toFixed(2);

//     return {
//       score,
//       percentage: String(percentage),
//       totalQuestions,
//       selectedAnswers: transformed,
//     };
//   };

//   const calculateTimeTaken = (answers: QuizAnswer[] | undefined) => {
//     if (!answers || answers.length === 0) return null;
//     // take earliest createdAt and latest submittedAt
//     const createds = answers
//       .map((a) => a.createdAt)
//       .filter(Boolean) as string[];
//     const submitteds = answers
//       .map((a) => a.submittedAt)
//       .filter(Boolean) as string[];
//     if (createds.length === 0 || submitteds.length === 0) return null;

//     const start = new Date(
//       Math.min(...createds.map((d) => new Date(d).getTime()))
//     );
//     const end = new Date(
//       Math.max(...submitteds.map((d) => new Date(d).getTime()))
//     );
//     const diffMs = Math.max(0, end.getTime() - start.getTime());
//     const mins = Math.floor(diffMs / 60000);
//     const secs = Math.floor((diffMs % 60000) / 1000);
//     return `${mins}m ${secs}s`;
//   };

//   const isAnswerCorrect = (selectedOptions: number[], correctOption: number) =>
//     selectedOptions.includes(correctOption);

//   if (!user) return null;

//   if (loading) {
//     return (
//       <div className="min-h-screen bg-zinc-50 dark:bg-zinc-950">
//         <div className="container mx-auto px-4 py-12 max-w-3xl">
//           <div className="animate-pulse space-y-6">
//             <div className="h-8 bg-zinc-200 dark:bg-zinc-800 rounded w-1/3" />
//             <div className="h-6 bg-zinc-200 dark:bg-zinc-800 rounded w-2/3" />
//             <div className="h-64 bg-zinc-100 dark:bg-zinc-900 rounded-lg" />
//           </div>
//         </div>
//       </div>
//     );
//   }

//   if (error || !result) {
//     return (
//       <div className="min-h-screen bg-zinc-50 dark:bg-zinc-950">
//         <div className="container mx-auto px-4 py-12 max-w-3xl">
//           <Alert className="border-zinc-200 dark:border-zinc-800">
//             <X className="h-4 w-4" />
//             <AlertDescription>{error || "Result not found"}</AlertDescription>
//           </Alert>
//         </div>
//       </div>
//     );
//   }

//   const scorePercentage = Number.parseFloat(String(result.percentage));
//   const timeTaken = calculateTimeTaken(result.selectedAnswers);

//   return (
//     <div className="min-h-screen bg-zinc-50 dark:bg-zinc-950 relative">
//       {/* Subtle radial gradient background (light weight). Visible as a soft decorative ellipse. */}
//       <div aria-hidden className="pointer-events-none absolute inset-0 -z-10">
//         {/* light mode ellipse */}
//         <div
//           className="hidden dark:hidden sm:block dark:dark:hidden" /* fallback no-op for tailwind processing */
//           style={{
//             position: "absolute",
//             top: "-8rem",
//             right: "-12rem",
//             width: "40rem",
//             height: "40rem",
//             background:
//               "radial-gradient(ellipse at 10% 10%, rgba(17,24,39,0.03), transparent 30%)",
//             transform: "rotate(10deg)",
//             borderRadius: "50%",
//           }}
//         />
//         {/* dark mode ellipse */}
//         <div
//           className="hidden dark:block"
//           style={{
//             position: "absolute",
//             top: "-8rem",
//             right: "-12rem",
//             width: "40rem",
//             height: "40rem",
//             background:
//               "radial-gradient(ellipse at 10% 10%, rgba(250,250,250,0.02), transparent 30%)",
//             transform: "rotate(10deg)",
//             borderRadius: "50%",
//           }}
//         />
//       </div>

//       <div className="container mx-auto px-4 py-10 max-w-4xl">
//         {/* Header */}
//         <header className="mb-8">
//           <div className="flex items-center justify-between gap-4">
//             <div>
//               <h1 className="text-3xl font-bold text-zinc-900 dark:text-zinc-100">
//                 Quiz Complete
//               </h1>
//               <p className="text-sm text-zinc-600 dark:text-zinc-400 flex items-center gap-2 mt-1">
//                 <Calendar className="h-4 w-4" />
//                 {new Date().toLocaleDateString("en-US", {
//                   weekday: "long",
//                   year: "numeric",
//                   month: "long",
//                   day: "numeric",
//                 })}
//                 {timeTaken && <span className="ml-3">• {timeTaken}</span>}
//               </p>
//             </div>
//             <div className="text-right">
//               <Badge className="bg-zinc-100 dark:bg-zinc-800 text-zinc-800 dark:text-zinc-200 border border-zinc-200 dark:border-zinc-700">
//                 {result.totalQuestions} Questions
//               </Badge>
//             </div>
//           </div>
//         </header>

//         {/* Performance card */}
//         <Card className="mb-8 border-zinc-200 dark:border-zinc-800 bg-white dark:bg-zinc-900 shadow-sm">
//           <CardHeader className="p-6">
//             <div className="flex items-center justify-between gap-6">
//               <div>
//                 <CardTitle className="text-2xl font-semibold text-zinc-900 dark:text-zinc-100">
//                   {scorePercentage.toFixed(0)}%
//                 </CardTitle>
//                 <CardDescription className="text-sm text-zinc-600 dark:text-zinc-400 mt-1">
//                   Overall Score
//                 </CardDescription>
//               </div>
//               <div className="min-w-[12rem]">
//                 <div className="flex items-center justify-end gap-4">
//                   <div className="text-right">
//                     <div className="text-xs text-zinc-600 dark:text-zinc-400">
//                       Correct
//                     </div>
//                     <div className="font-medium text-zinc-900 dark:text-zinc-100">
//                       {result.score}
//                     </div>
//                   </div>
//                   <div className="text-right">
//                     <div className="text-xs text-zinc-600 dark:text-zinc-400">
//                       Total
//                     </div>
//                     <div className="font-medium text-zinc-900 dark:text-zinc-100">
//                       {result.totalQuestions}
//                     </div>
//                   </div>
//                 </div>
//               </div>
//             </div>

//             <div className="mt-6">
//               <div className="flex items-center justify-between text-sm text-zinc-600 dark:text-zinc-400 mb-2">
//                 <span>Performance</span>
//                 <span className="font-semibold text-zinc-900 dark:text-zinc-100">
//                   {scorePercentage}%
//                 </span>
//               </div>
//               <Progress
//                 value={Math.max(0, Math.min(100, scorePercentage))}
//                 className="h-3 bg-zinc-100 dark:bg-zinc-800"
//               />
//             </div>
//           </CardHeader>
//         </Card>

//         <Separator className="my-8" />

//         {/* Question review */}
//         <section className="space-y-6">
//           <div className="flex items-center justify-between">
//             <div className="flex items-center gap-3">
//               <BookOpen className="h-5 w-5 text-zinc-600 dark:text-zinc-400" />
//               <div>
//                 <h2 className="text-xl font-semibold text-zinc-900 dark:text-zinc-100">
//                   Question Review
//                 </h2>
//                 <p className="text-sm text-zinc-600 dark:text-zinc-400">
//                   Review your answers and explanations
//                 </p>
//               </div>
//             </div>
//             <div className="flex items-center gap-2">
//               <Link
//                 href="/"
//                 className="text-sm text-blue-600 dark:text-blue-400 hover:underline flex items-center gap-2"
//               >
//                 <Share2 className="h-4 w-4" /> Share
//               </Link>
//             </div>
//           </div>

//           {result.selectedAnswers.map((ans, idx) => {
//             const correct = isAnswerCorrect(
//               ans.selectedOptions,
//               ans.correctOption
//             );
//             return (
//               <article
//                 key={ans.questionId}
//                 className="border border-zinc-200 dark:border-zinc-800 rounded-lg bg-white dark:bg-zinc-900 p-5"
//               >
//                 <header className="flex items-start justify-between gap-4 mb-4">
//                   <div className="flex-1">
//                     <div className="flex items-center gap-3 mb-2">
//                       <Badge
//                         className={`px-2 py-1 text-sm ${
//                           correct
//                             ? "bg-blue-600 text-white"
//                             : "bg-zinc-50 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 border border-zinc-200 dark:border-zinc-700"
//                         }`}
//                       >
//                         {correct ? (
//                           <span className="inline-flex items-center gap-2">
//                             <CheckCircle2 className="h-4 w-4" /> Correct
//                           </span>
//                         ) : (
//                           <span className="inline-flex items-center gap-2">
//                             <X className="h-4 w-4" /> Incorrect
//                           </span>
//                         )}
//                       </Badge>
//                       <span className="text-sm text-zinc-500 dark:text-zinc-400">
//                         Question {idx + 1}
//                       </span>
//                     </div>
//                     <h3 className="text-lg font-medium text-zinc-900 dark:text-zinc-100">
//                       {ans.question}
//                     </h3>
//                   </div>
//                 </header>

//                 <div className="space-y-3">
//                   {ans.options.map((opt, oi) => {
//                     const isSelected = ans.selectedOptions.includes(oi);
//                     const isCorrectOption = ans.correctOption === oi;

//                     // Minimalist styling: blue accent for correct / user-mark
//                     let base = "rounded-lg p-3 border ";
//                     let border = "border-zinc-200 dark:border-zinc-700";
//                     let bg = "bg-zinc-50 dark:bg-zinc-900";
//                     let leftAccent = "";

//                     if (isCorrectOption) {
//                       border = "border-blue-300 dark:border-blue-700";
//                       bg = "bg-blue-50/30 dark:bg-blue-900/10";
//                       leftAccent =
//                         "before:content-[''] before:block before:w-1 before:h-full before:rounded-l-md before:bg-blue-600 before:mr-3";
//                     } else if (isSelected && !isCorrectOption) {
//                       border = "border-zinc-300 dark:border-zinc-600";
//                       bg = "bg-zinc-50 dark:bg-zinc-900";
//                     }

//                     return (
//                       <div
//                         key={oi}
//                         className={`${base} ${border} ${bg} flex items-center justify-between`}
//                       >
//                         <div className="flex items-center gap-3">
//                           <div className="w-8 h-8 rounded-full bg-zinc-200 dark:bg-zinc-700 flex items-center justify-center text-sm font-medium text-zinc-700 dark:text-zinc-200">
//                             {String.fromCharCode(65 + oi)}
//                           </div>
//                           <div className="text-zinc-900 dark:text-zinc-100">
//                             {opt}
//                           </div>
//                         </div>

//                         <div className="flex items-center gap-2">
//                           {isSelected && (
//                             <Badge className="text-xs bg-blue-50 dark:bg-blue-900/10 text-blue-700 dark:text-blue-300 border border-blue-100 dark:border-blue-800">
//                               Your Choice
//                             </Badge>
//                           )}
//                           {isCorrectOption && (
//                             <Badge className="text-xs bg-blue-600 text-white">
//                               Correct Answer
//                             </Badge>
//                           )}
//                         </div>
//                       </div>
//                     );
//                   })}
//                 </div>

//                 <div className="mt-4">
//                   <Accordion type="single" collapsible>
//                     <AccordionItem
//                       value={`ex-${ans.questionId}`}
//                       className="border-0"
//                     >
//                       <AccordionTrigger className="p-3 rounded-md bg-zinc-50 dark:bg-zinc-800 border border-zinc-200 dark:border-zinc-700">
//                         <div className="flex items-center gap-2 text-zinc-700 dark:text-zinc-300">
//                           <Info className="h-4 w-4" />
//                           <span className="font-medium">Explanation</span>
//                         </div>
//                       </AccordionTrigger>
//                       <AccordionContent className="pt-3">
//                         <Alert className="border-zinc-200 dark:border-zinc-700 bg-zinc-50 dark:bg-zinc-900">
//                           <Info className="h-4 w-4 text-zinc-600 dark:text-zinc-400" />
//                           <AlertDescription>
//                             <div className="text-zinc-700 dark:text-zinc-300">
//                               {ans.explanation ??
//                                 (isAnswerCorrect(
//                                   ans.selectedOptions,
//                                   ans.correctOption
//                                 )
//                                   ? "Nice work — you selected the correct answer."
//                                   : "No explanation provided. Review the correct answer above.")}
//                             </div>
//                           </AlertDescription>
//                         </Alert>
//                       </AccordionContent>
//                     </AccordionItem>
//                   </Accordion>
//                 </div>
//               </article>
//             );
//           })}
//         </section>
//       </div>
//     </div>
//   );
// }
